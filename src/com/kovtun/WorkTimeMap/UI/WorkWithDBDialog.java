/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kovtun.WorkTimeMap.UI;

import com.kovtun.WorkTimeMap.IntegerFilter;
import com.kovtun.WorkTimeMap.SQLConnector;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.PlainDocument;

/**
 *
 * @author kovtun
 */
public class WorkWithDBDialog extends javax.swing.JDialog {
    private final String CreateDB="CREATE DATABASE `wtm` DEFAULT CHARACTER SET utf8;";
    private final String UseDB="USE wtm;";    
    private final String CreateUserTable="CREATE TABLE `user` (" +
        "  `id` int(11) NOT NULL AUTO_INCREMENT," +
        "  `fio` varchar(100) NOT NULL," +
        "  `login` varchar(20) NOT NULL," +
        "  `password` varchar(20) NOT NULL," +
        "  `rights` int(11) NOT NULL," +
        "  `color` int(11) DEFAULT NULL," +
        "  PRIMARY KEY (`id`)" +
        ") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    private final String CreateProjectsTable="CREATE TABLE `projects` (" +
        "  `id` int(11) NOT NULL AUTO_INCREMENT," +
        "  `name` varchar(150) NOT NULL," +
        "  `start_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP," +
        "  `stop_time` timestamp NULL DEFAULT NULL," +
        "  `creator_id` int(11) NOT NULL," +
        "  PRIMARY KEY (`id`)," +
        "  KEY `index2` (`creator_id`)," +
        "  CONSTRAINT `fk_projects_1` FOREIGN KEY (`creator_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE" +
        ") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    private final String CreateKeyTable="CREATE TABLE `projects_and_users` (" +
        "  `user_id` int(11) NOT NULL," +
        "  `project_id` int(11) NOT NULL," +
        "  PRIMARY KEY (`user_id`,`project_id`)," +
        "  KEY `fk_projects_and_users_2_idx` (`project_id`)," +
        "  CONSTRAINT `fk_projects_and_users_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE," +
        "  CONSTRAINT `fk_projects_and_users_2` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE ON UPDATE CASCADE" +
        ") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    private final String CreateActionTable="CREATE TABLE `work_action` (" +
        "  `id` int(11) NOT NULL AUTO_INCREMENT," +
        "  `name` varchar(255) NOT NULL," +
        "  `description` varchar(2000) NOT NULL," +
        "  `comment` varchar(2000) DEFAULT NULL," +
        "  `user_id` int(11) NOT NULL," +
        "  `start_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP," +
        "  `stop_time` timestamp NULL DEFAULT NULL," +
        "  `project_id` int(11) NOT NULL," +
        "  PRIMARY KEY (`id`)," +
        "  KEY `index2` (`user_id`)," +
        "  KEY `index3` (`project_id`)," +
        "  CONSTRAINT `fk_work_action_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE," +
        "  CONSTRAINT `fk_work_action_2` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE ON UPDATE CASCADE" +
        ") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    private final String CreateLogTable="CREATE TABLE `log` (" +
        "  `id` int(11) NOT NULL AUTO_INCREMENT," +
        "  `user_id` int(11) NOT NULL," +
        "  `action` varchar(45) NOT NULL," +
        "  PRIMARY KEY (`id`)," +
        "  KEY `index2` (`user_id`)," +
        "  CONSTRAINT `fk_log_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE" +
        ") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    private final String InsertAdmin="INSERT INTO `user`(`id`,`fio`,`login`,`password`,`rights`,`color`) VALUES(0,'admin','adnim','admin',1,0);";
    private final String InsertNoProject="INSERT INTO `projects`(`id`,`name`,`start_time`,`stop_time`,`creator_id`) VALUES(1, 'Без проекта', '2017-01-01 09:00:00', NULL, '1');";
    /**
     * Creates new form WorkWithDBDialog
     */
    public WorkWithDBDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        PlainDocument doc = (PlainDocument) portField.getDocument();
        doc.setDocumentFilter(new IntegerFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        urlField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        creacteButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        loginField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("База данных");

        jLabel1.setText("Адрес:");

        jLabel2.setText("Порт:");

        checkButton.setText("Проверить соединение");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        creacteButton.setText("Создать базу данных");
        creacteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creacteButtonActionPerformed(evt);
            }
        });

        jButton3.setText("ОК");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Логин:");

        jLabel3.setText("Пароль:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(checkButton)
                                .addGap(18, 18, 18)
                                .addComponent(creacteButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portField)
                            .addComponent(urlField)
                            .addComponent(loginField)
                            .addComponent(passwordField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creacteButton)
                    .addComponent(checkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        Connection connection=check();
        if(connection!=null){
            JOptionPane.showMessageDialog(this, "Попытка подключится прошла удачно.","Попытка подключения", JOptionPane.PLAIN_MESSAGE);
            try {
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void creacteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creacteButtonActionPerformed
        Connection connection=check();
        Statement statement;
        try {
            statement=connection.createStatement();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Неправельно введены данные. Невозможно подключится к базе.","Ошибка", JOptionPane.ERROR_MESSAGE);
            try {
                connection.close();
            } catch (SQLException ex1) {
                return;
            }
            return;
        }
        try {
            statement.execute(CreateDB);
            statement.execute(UseDB);
            statement.execute(CreateUserTable);
            statement.execute(CreateProjectsTable);
            statement.execute(CreateKeyTable);
            statement.execute(CreateActionTable);
            statement.execute(CreateLogTable);
            statement.execute(InsertAdmin);
            statement.execute(InsertNoProject);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Неправельно введены данные. Невозможно подключится к базе.","Ошибка", JOptionPane.ERROR_MESSAGE);
            try {
                statement.close();
                connection.close();
            } catch (SQLException ex1) {
                
            }
        }
        JOptionPane.showMessageDialog(this, "База данных успешно была создана.","Создание базы данных", JOptionPane.PLAIN_MESSAGE);
        try {
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            
        }
    }//GEN-LAST:event_creacteButtonActionPerformed
    private Connection check(){
        if(urlField.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Незаполнено поле адреса дазы данных","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if(portField.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Незаполнено поле порта дазы данных","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if(loginField.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Незаполнено поле логина дазы данных","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if(passwordField.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Незаполнено поле пароля дазы данных","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        Connection connection=null;
        try{
            connection=SQLConnector.getConnection(loginField.getText(), passwordField.getText(), urlField.getText(), Integer.parseInt(portField.getText()));
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Ошибка подключения к базе данных","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Неправельно введены данные. Невозможно подключится к базе.","Ошибка", JOptionPane.ERROR_MESSAGE);
            
            return null;
        }
        return connection;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JButton creacteButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField loginField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField portField;
    private javax.swing.JTextField urlField;
    // End of variables declaration//GEN-END:variables
}
