/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kovtun.WorkTimeMap.UI;

import com.kovtun.WorkTimeMap.CallBacks.SelectProjectCallBack;
import com.kovtun.WorkTimeMap.CallBacks.SelectUserCallBack;
import com.kovtun.WorkTimeMap.Models.db.Action;
import com.kovtun.WorkTimeMap.Models.db.Project;
import com.kovtun.WorkTimeMap.Models.db.User;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import com.kovtun.WorkTimeMap.Models.other.Cell;
import com.kovtun.WorkTimeMap.Models.other.GraphicModel;
import com.kovtun.WorkTimeMap.Models.other.HeaderLabel;
import com.kovtun.WorkTimeMap.Models.other.SubLabel;
import com.kovtun.WorkTimeMap.Values;
import java.awt.Frame;
import javax.swing.JOptionPane;
/**
 *
 * @author kovtun
 */
public class GraphReportOptions extends javax.swing.JDialog implements SelectProjectCallBack,SelectUserCallBack{
    private EntityManager em;
    private List<User> selectedUserList=null;
    private List<Project> selectedProjectList=null;
    private Project selectedProject=null;
    /**
     * Creates new form GraphReportOptions
     */
    public GraphReportOptions(java.awt.Frame parent, boolean modal,EntityManager em) {
        super(parent, modal);
        this.em=em;
        initComponents();
        setGroup();
    }
    
    private void setGroup(){
        Grouproup.add(prRadioButton);
        Grouproup.add(allProjectTimeRadioButton);
        Grouproup.add(perfRadioButton);
        Grouproup.add(allPeriodActionsRadioButton);
    }
    
    private List<Cell> createCells(Calendar from, Calendar to){
        List<Cell> out=new ArrayList();
        if(from.get(Calendar.YEAR)==to.get(Calendar.YEAR)){
            Calendar c=Calendar.getInstance();
            c.setTime(from.getTime());
            while(c.get(Calendar.DAY_OF_YEAR)<=to.get(Calendar.DAY_OF_YEAR)){
                if(c.get(Calendar.DAY_OF_WEEK)!=1&&c.get(Calendar.DAY_OF_WEEK)!=7){
                    Calendar toList=Calendar.getInstance();
                    toList.setTime(new Date(c.getTimeInMillis()));
                    out.add(new Cell(toList));
                }
                c.add(Calendar.DAY_OF_YEAR, 1);
            }
        }else{
            Calendar c=Calendar.getInstance();
            c.setTime(from.getTime());
            Calendar t1=Calendar.getInstance();
            t1.setTime(from.getTime());
            t1.set(Calendar.DAY_OF_YEAR, t1.getMaximum(Calendar.DAY_OF_YEAR));
            while(c.get(Calendar.YEAR)!=to.get(Calendar.YEAR)){
                while(c.get(Calendar.DAY_OF_YEAR)!=t1.get(Calendar.DAY_OF_YEAR)){
                    if(c.get(Calendar.DAY_OF_WEEK)!=1&&c.get(Calendar.DAY_OF_WEEK)!=7){
                        Calendar toList=Calendar.getInstance();
                        toList.setTime(new Date(c.getTimeInMillis()));
                        out.add(new Cell(toList));
                    }
                    c.add(Calendar.DAY_OF_YEAR, 1);
                }
                c.add(Calendar.DAY_OF_YEAR, 1);
            }
            
            while(c.get(Calendar.DAY_OF_YEAR)<=to.get(Calendar.DAY_OF_YEAR)){
                if(c.get(Calendar.DAY_OF_WEEK)!=1&&c.get(Calendar.DAY_OF_WEEK)!=7){
                    Calendar toList=Calendar.getInstance();
                    toList.setTime(new Date(c.getTimeInMillis()));
                    out.add(new Cell(toList));
                }
                c.add(Calendar.DAY_OF_YEAR, 1);
            }
        }
        
        return out;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Grouproup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        prRadioButton = new javax.swing.JRadioButton();
        perfRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        selProjButton = new javax.swing.JButton();
        projectLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        usersLabel = new javax.swing.JLabel();
        perfSelButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        fromDateChooserCombo = new datechooser.beans.DateChooserCombo();
        jLabel7 = new javax.swing.JLabel();
        toDateChooserCombo = new datechooser.beans.DateChooserCombo();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        allProjectTimeRadioButton = new javax.swing.JRadioButton();
        allPeriodActionsRadioButton = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Тип отчета:");

        prRadioButton.setSelected(true);
        prRadioButton.setText("По проектам");
        prRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonsActionPerformed(evt);
            }
        });

        perfRadioButton.setText("По исполнителям");
        perfRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonsActionPerformed(evt);
            }
        });

        jLabel2.setText("Проекты:");

        selProjButton.setText("Выбрать");
        selProjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selProjButtonActionPerformed(evt);
            }
        });

        projectLabel.setText("Не выбраны");

        jLabel4.setText("Исполнители:");

        usersLabel.setText("Не выбраны");

        perfSelButton.setText("Выбрать");
        perfSelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfSelButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Дата с:");

        fromDateChooserCombo.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        jLabel7.setText("Дата по:");

        toDateChooserCombo.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        okButton.setText("ОК");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Отмена");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        allProjectTimeRadioButton.setText("По всему проекту");
        allProjectTimeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonsActionPerformed(evt);
            }
        });

        allPeriodActionsRadioButton.setText("Все действия за период");
        allPeriodActionsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonsActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "По проектам", "По исполнителям" }));
        jComboBox1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(allPeriodActionsRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selProjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perfSelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(perfRadioButton)
                            .addComponent(jLabel1)
                            .addComponent(prRadioButton)
                            .addComponent(allProjectTimeRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fromDateChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(toDateChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allProjectTimeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(perfRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allPeriodActionsRadioButton)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(fromDateChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(toDateChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selProjButton)
                    .addComponent(projectLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(usersLabel)
                    .addComponent(perfSelButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void perfSelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfSelButtonActionPerformed
        List<User> users=em.createNamedQuery("User.findAllWorkers",User.class).getResultList();
        if (!(users.size()>0)){
                JOptionPane.showMessageDialog(this, "Нет исполнителей","Ошибка", JOptionPane.ERROR_MESSAGE);
                return;
            }
        UserDialog dialog=new UserDialog(new Frame(),true,users,this,javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_perfSelButtonActionPerformed

    private void RadioButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonsActionPerformed
        if(allPeriodActionsRadioButton.isSelected()){
            jComboBox1.setEnabled(true);
            selProjButton.setEnabled(false);
            perfSelButton.setEnabled(false);
            projectLabel.setText("Все проекты за период");
            usersLabel.setText("Все исполнители за период");
            fromDateChooserCombo.setEnabled(true);
            toDateChooserCombo.setEnabled(true);
        }else if(allProjectTimeRadioButton.isSelected()){
            jComboBox1.setEnabled(false);
            fromDateChooserCombo.setEnabled(false);
            toDateChooserCombo.setEnabled(false);
            perfSelButton.setEnabled(false);
            selProjButton.setEnabled(true);
            projectLabel.setText("Не выбраны");
            usersLabel.setText("Не выбраны");
        }else{
            jComboBox1.setEnabled(false);
            selProjButton.setEnabled(true);
            perfSelButton.setEnabled(true);
            projectLabel.setText("Не выбраны");
            usersLabel.setText("Не выбраны");
            fromDateChooserCombo.setEnabled(true);
            toDateChooserCombo.setEnabled(true);
        }
    }//GEN-LAST:event_RadioButtonsActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        GraphicModel model=null;
        if(allPeriodActionsRadioButton.isSelected())
            if(jComboBox1.getSelectedIndex()==0)
                model=getGraphicModelBySelectedTimeAndProject(false);
            else
                model=getGraphicModelBySelectedTimeAndUser(false);
        
        if(allProjectTimeRadioButton.isSelected())
            model=getGraphicModelAllProject();
        
        if(prRadioButton.isSelected())
            model=getGraphicModelBySelectedTimeAndProject(true);
        
        if(perfRadioButton.isSelected())
            model=getGraphicModelBySelectedTimeAndUser(true);
        
        if(model!=null){
            GraphicReportDialog dialog = new GraphicReportDialog(new javax.swing.JFrame(), true,model);
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
        
        
    }//GEN-LAST:event_okButtonActionPerformed

    private void selProjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selProjButtonActionPerformed
        if(allProjectTimeRadioButton.isSelected()){
            List<Project> projects=em.createNamedQuery("Project.findAll", Project.class).getResultList();
            if (!(projects.size()>0)){
                JOptionPane.showMessageDialog(this, "Нет проектов","Ошибка", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ProjectDialog dialog = new ProjectDialog(new Frame(), true,projects, this,javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }else{
            List<Project> projects=em.createNamedQuery("Project.findAll", Project.class).getResultList();
            if (!(projects.size()>0)){
                JOptionPane.showMessageDialog(this, "Нет проектов","Ошибка", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ProjectDialog dialog = new ProjectDialog(new Frame(), true,projects, this,javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_selProjButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private GraphicModel getGraphicModelBySelectedTimeAndUser(boolean isByUserList){
        if(fromDateChooserCombo.getCurrent().getTimeInMillis()>toDateChooserCombo.getCurrent().getTimeInMillis()){
            JOptionPane.showMessageDialog(this, "Дата начала отчетного периода толжан быть раньше даты окончания","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        Calendar cFrom=fromDateChooserCombo.getCurrent();
        Calendar cTo=toDateChooserCombo.getCurrent();
        
        cFrom.set(Calendar.HOUR, 00);
        cFrom.set(Calendar.MINUTE, 00);
        cFrom.set(Calendar.SECOND, 00);
        Date from=cFrom.getTime();
        cTo.set(Calendar.HOUR, 23);
        cTo.set(Calendar.MINUTE, 59);
        cTo.set(Calendar.SECOND, 59);
        Date to=cTo.getTime();
        
        GraphicModel model=new GraphicModel();
        model.setType(Values.PERFORMERS);
        model.setCellList(createCells(cFrom, cTo));
        List<User> userList=null;
        if(!isByUserList){
            userList=em.createQuery("SELECT u FROM Action a JOIN a.userId u WHERE a.startTime>=:start AND a.stopTime<=:stop GROUP BY u", User.class)
                .setParameter("start", from)
                .setParameter("stop", to)
                .getResultList();
        }else{
            if(selectedProjectList!=null)
                    userList=this.selectedUserList;
                else{
                    JOptionPane.showMessageDialog(this, "Не выбран проекты!","Ошибка", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
        }
        for(User u:userList){
            HeaderLabel hl=new HeaderLabel();
            hl.setLabelData(u.getFio());
            hl.setCellList(createCells(cFrom, cTo));
            List<Project> projectList=null;
            if(!isByUserList){
                projectList=em.createQuery("SELECT p FROM Action a JOIN a.projectId p JOIN a.userId u WHERE a.startTime>=:start AND a.stopTime<=:stop AND u.id=:idu GROUP BY p", Project.class)
                        .setParameter("start", from)
                        .setParameter("stop", to)
                        .setParameter("idu", u.getId())
                        .getResultList();
            }else{
                if(selectedProjectList!=null)
                    projectList=this.selectedProjectList;
                else{
                    JOptionPane.showMessageDialog(this, "Не выбран проекты!","Ошибка", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
            }
            for(Project p:projectList){
                SubLabel sl=new SubLabel(p.getName(), createCells(cFrom, cTo));
                List<Action> actionList=em.createQuery("SELECT a FROM Action a JOIN a.userId u JOIN a.projectId p WHERE a.startTime>=:start AND a.stopTime<=:stop "
                        + "AND u.id=:idu AND p.id=:idp", Action.class)
                        .setParameter("start", from)
                        .setParameter("stop", to)
                        .setParameter("idu", u.getId())
                        .setParameter("idp", p.getId())
                        .getResultList();
                for(Action a:actionList){
                    for(int i=0;i<createCells(cFrom, cTo).size();i++){
                        if((sl.getCellList().get(i).getStartDate().getTime()<a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()>a.getStopTime().getTime())
                                ||(sl.getCellList().get(i).getStartDate().getTime()>a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()>a.getStopTime().getTime())){
                            
                            sl.getCellList().get(i).setVisible(true);
                            hl.getCellList().get(i).setVisible(true);
                            sl.getCellList().get(i).addAction(a);
                            hl.getCellList().get(i).addAction(a);
                            break;
                            /**
                             * next action
                             */
                        }else if((sl.getCellList().get(i).getStartDate().getTime()<a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()<a.getStopTime().getTime()
                                &&a.getStartTime().getTime()<sl.getCellList().get(i).getStopDate().getTime())
                                ||(sl.getCellList().get(i).getStartDate().getTime()>a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()<a.getStopTime().getTime())){
                            
                            sl.getCellList().get(i).setVisible(true);
                            hl.getCellList().get(i).setVisible(true);
                            sl.getCellList().get(i).addAction(a);
                            hl.getCellList().get(i).addAction(a);
                            /**
                             * next cell
                             */
                        }
                    }
                }
                hl.addSubLabel(sl);
            }
            model.addHeaderLabel(hl);
        }
        return model;
    }
    private GraphicModel getGraphicModelBySelectedTimeAndProject(boolean isByProjectList){
        if(fromDateChooserCombo.getCurrent().getTimeInMillis()>toDateChooserCombo.getCurrent().getTimeInMillis()){
            JOptionPane.showMessageDialog(this, "Дата начала отчетного периода толжан быть раньше даты окончания","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        Calendar cFrom=fromDateChooserCombo.getCurrent();
        Calendar cTo=toDateChooserCombo.getCurrent();
        
        cFrom.set(Calendar.HOUR, 00);
        cFrom.set(Calendar.MINUTE, 00);
        cFrom.set(Calendar.SECOND, 00);
        Date from=cFrom.getTime();
        cTo.set(Calendar.HOUR, 23);
        cTo.set(Calendar.MINUTE, 59);
        cTo.set(Calendar.SECOND, 59);
        Date to=cTo.getTime();
        
        GraphicModel model=new GraphicModel();
        model.setType(Values.PROJECTS);
        model.setCellList(createCells(cFrom, cTo));
        List<Project> projectList=null;
        if(!isByProjectList){
            projectList=em.createQuery("SELECT p FROM Action a JOIN a.projectId p WHERE a.startTime>=:start AND a.stopTime<=:stop GROUP BY p", Project.class)
                .setParameter("start", from)
                .setParameter("stop", to)
                .getResultList();
        }else{
            if(selectedProjectList!=null)
                projectList=this.selectedProjectList;
            else{
                JOptionPane.showMessageDialog(this, "Не выбран проекты!","Ошибка", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        for(Project p:projectList){
            HeaderLabel hl=new HeaderLabel();
            hl.setLabelData(p.getName());
            hl.setCellList(createCells(cFrom, cTo));
            List<User> userList=null;
            if(!isByProjectList){
                userList=em.createQuery("SELECT u FROM Action a JOIN a.userId u JOIN a.projectId p WHERE a.startTime>=:start AND a.stopTime<=:stop AND p.id=:idp"
                    + " GROUP BY u", User.class)
                    .setParameter("start", from)
                    .setParameter("stop", to)
                    .setParameter("idp", p.getId())
                    .getResultList();
            }else{
                if(selectedProjectList!=null)
                    userList=this.selectedUserList;
                else{
                    JOptionPane.showMessageDialog(this, "Не выбран проекты!","Ошибка", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
            }
            
            for(User u:userList){
                SubLabel sl=new SubLabel(u.getFio(), createCells(cFrom, cTo));
                List<Action> actionList=em.createQuery("SELECT a FROM Action a JOIN a.userId u JOIN a.projectId p WHERE a.startTime>=:start AND a.stopTime<=:stop "
                        + "AND u.id=:idu AND p.id=:idp", Action.class)
                        .setParameter("start", from)
                        .setParameter("stop", to)
                        .setParameter("idu", u.getId())
                        .setParameter("idp", p.getId())
                        .getResultList();
                for(Action a:actionList){
                    for(int i=0;i<createCells(cFrom, cTo).size();i++){
                        if((sl.getCellList().get(i).getStartDate().getTime()<a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()>a.getStopTime().getTime())
                                ||(sl.getCellList().get(i).getStartDate().getTime()>a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()>a.getStopTime().getTime())){
                            sl.getCellList().get(i).setVisible(true);
                            hl.getCellList().get(i).setVisible(true);
                            sl.getCellList().get(i).addAction(a);
                            hl.getCellList().get(i).addAction(a);
                            break;
                            /**
                             * next action
                             */
                        }else if((sl.getCellList().get(i).getStartDate().getTime()<a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()<a.getStopTime().getTime()
                                &&a.getStartTime().getTime()<sl.getCellList().get(i).getStopDate().getTime())
                                ||(sl.getCellList().get(i).getStartDate().getTime()>a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()<a.getStopTime().getTime())){
                            sl.getCellList().get(i).setVisible(true);
                            hl.getCellList().get(i).setVisible(true);
                            sl.getCellList().get(i).addAction(a);
                            hl.getCellList().get(i).addAction(a);
                            /**
                             * next cell
                             */
                        }
                    }
                }
                hl.addSubLabel(sl);
            }
            model.addHeaderLabel(hl);
        }
        return model;
    }
    
    private GraphicModel getGraphicModelAllProject(){
        if(selectedProject==null){
            JOptionPane.showMessageDialog(this, "Не выбран проект!","Ошибка", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        Calendar cFrom=Calendar.getInstance();
        cFrom.setTime(selectedProject.getStartTime());
        cFrom.set(Calendar.HOUR, 00);
        cFrom.set(Calendar.MINUTE, 00);
        cFrom.set(Calendar.SECOND, 00);
        Calendar cTo=Calendar.getInstance();
        cTo.setTime((selectedProject.getStopTime()!=null?selectedProject.getStopTime():new Date()));
        cTo.set(Calendar.HOUR, 23);
        cTo.set(Calendar.MINUTE, 59);
        cTo.set(Calendar.SECOND, 59);
        
        GraphicModel model=new GraphicModel();
        model.setType(Values.PROJECTS);
        model.setCellList(createCells(cFrom,cTo));
        
        HeaderLabel hl=new HeaderLabel();
        hl.setLabelData(selectedProject.getName());
        hl.setCellList(createCells(cFrom, cTo));
        
        for(User u:selectedProject.getUserList()){
            SubLabel sl=new SubLabel(u.getFio(), createCells(cFrom, cTo));
                List<Action> actionList=em.createQuery("SELECT a FROM Action a JOIN a.userId u JOIN a.projectId p WHERE a.startTime>=:start AND a.stopTime<=:stop "
                        + "AND u.id=:idu AND p.id=:idp", Action.class)
                        .setParameter("start", cFrom.getTime())
                        .setParameter("stop", cTo.getTime())
                        .setParameter("idu", u.getId())
                        .setParameter("idp", selectedProject.getId())
                        .getResultList();
                for(Action a:actionList){
                    for(int i=0;i<createCells(cFrom, cTo).size();i++){
                        if((sl.getCellList().get(i).getStartDate().getTime()<a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()>a.getStopTime().getTime())
                                ||(sl.getCellList().get(i).getStartDate().getTime()>a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()>a.getStopTime().getTime())){
                            sl.getCellList().get(i).setVisible(true);
                            hl.getCellList().get(i).setVisible(true);
                            sl.getCellList().get(i).addAction(a);
                            hl.getCellList().get(i).addAction(a);
                            break;
                            /**
                             * next action
                             */
                        }else if((sl.getCellList().get(i).getStartDate().getTime()<a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()<a.getStopTime().getTime()
                                &&a.getStartTime().getTime()<sl.getCellList().get(i).getStopDate().getTime())
                                ||(sl.getCellList().get(i).getStartDate().getTime()>a.getStartTime().getTime()&&sl.getCellList().get(i).getStopDate().getTime()<a.getStopTime().getTime())){
                            sl.getCellList().get(i).setVisible(true);
                            hl.getCellList().get(i).setVisible(true);
                            sl.getCellList().get(i).addAction(a);
                            hl.getCellList().get(i).addAction(a);
                            /**
                             * next cell
                             */
                        }
                    }
                }
                hl.addSubLabel(sl);
        }
        model.addHeaderLabel(hl);
        return model;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Grouproup;
    private javax.swing.JRadioButton allPeriodActionsRadioButton;
    private javax.swing.JRadioButton allProjectTimeRadioButton;
    private javax.swing.JButton cancelButton;
    private datechooser.beans.DateChooserCombo fromDateChooserCombo;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton perfRadioButton;
    private javax.swing.JButton perfSelButton;
    private javax.swing.JRadioButton prRadioButton;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JButton selProjButton;
    private datechooser.beans.DateChooserCombo toDateChooserCombo;
    private javax.swing.JLabel usersLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void projectSelected(Project project) {
        selectedProject=project;
        projectLabel.setText(project.getName());
    }

    @Override
    public void projectsSelected(List<Project> projectList) {
        selectedProjectList=projectList;
        if(projectList.size()>0){
            String text="";
            for(int i=0;i<projectList.size();i++)
                if(i!=(projectList.size()-1))
                    text+=projectList.get(i).getName()+",";
                else
                    text+=projectList.get(i).getName()+".";
            projectLabel.setText(text);
        }
        
    }

    @Override
    public void userSelected(User user) {
        
    }

    @Override
    public void usersSelected(List<User> userList) {
        selectedUserList=userList;
        if(userList.size()>0){
            String text="";
            for(int i=0;i<userList.size();i++)
                if(i!=(userList.size()-1))
                    text+=userList.get(i).getFio()+",";
                else
                    text+=userList.get(i).getFio()+".";
            usersLabel.setText(text);
        }
    }
}
